// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Priorities string

const (
	PrioritiesLow    Priorities = "low"
	PrioritiesMedium Priorities = "medium"
	PrioritiesHigh   Priorities = "high"
)

func (e *Priorities) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Priorities(s)
	case string:
		*e = Priorities(s)
	default:
		return fmt.Errorf("unsupported scan type for Priorities: %T", src)
	}
	return nil
}

type NullPriorities struct {
	Priorities Priorities
	Valid      bool // Valid is true if Priorities is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPriorities) Scan(value interface{}) error {
	if value == nil {
		ns.Priorities, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Priorities.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPriorities) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Priorities), nil
}

type Task struct {
	ID          uuid.UUID
	Title       string
	Description string
	Priority    Priorities
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	Completed   bool
}
