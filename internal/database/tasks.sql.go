// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one

insert into tasks(title, description, priority)
values($1, $2, $3)
returning id, title, description, priority, created_at, updated_at, completed
`

type CreateTaskParams struct {
	Title       string
	Description string
	Priority    Priorities
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Title, arg.Description, arg.Priority)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Completed,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec

delete from tasks
where id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one

select id, title, description, priority, created_at, updated_at, completed from tasks
where id = $1 limit 1
`

func (q *Queries) GetTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Completed,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many

select id, title, description, priority, created_at, updated_at, completed from tasks
order by created_at
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one

update tasks set
    title = $2,
    description = $3,
    priority = $4,
    updated_at = current_timestamp
where id = $1
returning id, title, description, priority, created_at, updated_at, completed
`

type UpdateTaskParams struct {
	ID          pgtype.UUID
	Title       string
	Description string
	Priority    Priorities
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Priority,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Completed,
	)
	return i, err
}
